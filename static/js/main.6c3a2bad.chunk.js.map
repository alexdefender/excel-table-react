{"version":3,"sources":["store/actions.js","store/constants.js","components/TableWrap/TableWrap.js","components/InfoRow/InfoRow.js","config/currencies.js","components/SelectTypeData/SelectTypeData.js","components/Faq/Faq.js","components/TableInfo/TableInfo.js","components/Table/Table.js","components/Row/Row.js","utils/isUrlValid.js","store/reducers/selectedCell.js","store/reducers/tableData.js","store/reducers/index.js","store/index.js","utils/generateFormula.js","components/Cell/Cell.js","utils/generateCurrencyFormat.js","components/FixedCell/FixedCell.js","components/App/App.js","index.js"],"names":["setCurrencyCell","payload","type","TableWrap","children","className","InfoRow","useSelector","store","selectedCell","tableData","valueCell","formulaCell","defaultValue","readOnly","currencies","SelectTypeData","dispatch","useDispatch","currency","isCurrency","useEffect","handleChange","e","stopPropagation","value","target","includes","renderCurrencies","name","onChange","map","cur","i","key","faqByFormulas","Faq","useState","showFaq","setShowFaq","renderFaq","Object","entries","formula","desc","onClick","TableInfo","Table","id","Row","isUrlValid","url","RegExp","test","reducer","state","action","initialState","cell","keys","combineReducers","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","formulaName","functionFormula","formulas","getState","args","newArgs","el","isTypesNumOrCurrency","isNaN","reduce","sum","argsLength","undefined","result","toFixed","toString","replace","join","length","res","toLowerCase","nextCell","types","typeSelectedCell","typeNextCell","generateFormula","val","toUpperCase","slice","some","hasFormula","argumentsFormula","split","transformValueToArgFormula","newValueCell","Cell","props","updateCellData","cellData","setCellData","updateFormulasData","hasOwnProperty","clearCellData","handleKeyDown","indexCell","isEdit","keyCode","refInput","setState","handleClick","setSelectedCell","handleDoubleClick","generateValueCell","newValue","parts","Number","generateCurrencyFormat","href","rel","autoFocus","ref","r","nextProps","nextState","this","JSON","stringify","document","addEventListener","prevProps","prevState","setTimeout","removeEventListener","isSelectedCell","correctValueCell","styleSelectedCell","onDoubleClick","Component","connect","CellFixed","generateTable","countRows","Array","fill","countCells","row","j","setDefaultTableData","App","table","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6c3a2bad.chunk.js","sourcesContent":["import {\n  SET_SELECTED_CELL,\n  SET_ALL_TABLE_DATA,\n  SET_CELL_DATA,\n  SET_TYPE_CELL,\n  SET_CURRENCY_CELL,\n} from './constants';\n\nexport const setSelectedCell = (payload) => ({\n  type: SET_SELECTED_CELL,\n  payload,\n});\n\nexport const setAllTableData = (payload) => ({\n  type: SET_ALL_TABLE_DATA,\n  payload,\n});\n\nexport const setCellData = (payload) => ({\n  type: SET_CELL_DATA,\n  payload,\n});\n\nexport const setTypeCell = (payload) => ({\n  type: SET_TYPE_CELL,\n  payload,\n});\n\nexport const setCurrencyCell = (payload) => ({\n  type: SET_CURRENCY_CELL,\n  payload,\n});\n","export const SET_SELECTED_CELL = 'SET_SELECTED_CELL';\nexport const SET_ALL_TABLE_DATA = 'SET_ALL_TABLE_DATA';\nexport const SET_CELL_DATA = 'SET_CELL_DATA';\nexport const SET_TYPE_CELL = 'SET_TYPE_CELL';\nexport const SET_CURRENCY_CELL = 'SET_CURRENCY_CELL';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableWrap = ({ children }) => <div className='TableWrap'>{children}</div>;\n\nTableWrap.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default TableWrap;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './InfoRow.scss';\n\nconst InfoRow = () => {\n  const { selectedCell, tableData } = useSelector((store) => store);\n  const valueCell =\n    tableData[selectedCell]?.formulaCell ||\n    tableData[selectedCell]?.valueCell ||\n    '';\n\n  return (\n    <div className='InfoRow'>\n      <input type='text' defaultValue={valueCell} readOnly />\n    </div>\n  );\n};\n\nexport default InfoRow;\n","export const currencies = ['грн.', '$', 'р.'];\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { currencies } from '../../config/currencies';\nimport { setTypeCell, setCurrencyCell } from '../../store/actions';\n\nimport './SelectTypeData.scss';\n\nconst SelectTypeData = () => {\n  const dispatch = useDispatch();\n  const { selectedCell, tableData } = useSelector((store) => store);\n  const type = tableData[selectedCell]?.type || 'string';\n  const currency = tableData[selectedCell]?.currency || '';\n  const isCurrency =\n    tableData[selectedCell] && tableData[selectedCell].type === 'currency';\n\n  useEffect(() => {\n    if (isCurrency && !currency) {\n      dispatch(\n        setCurrencyCell({ [selectedCell]: { currency: currencies[0] } })\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isCurrency]);\n\n  if (selectedCell === '') return null;\n\n  const handleChange = (e) => {\n    e.stopPropagation();\n    const { value } = e.target;\n\n    if (currencies.includes(value)) {\n      dispatch(setCurrencyCell({ [selectedCell]: { currency: value } }));\n    } else {\n      dispatch(setTypeCell({ [selectedCell]: { type: value } }));\n      dispatch(setCurrencyCell({ [selectedCell]: { currency: '' } }));\n    }\n  };\n\n  const renderCurrencies = (\n    <select value={currency} name='type-data' onChange={handleChange}>\n      {currencies.map((cur, i) => (\n        <option key={`${cur}-${i}`} value={cur}>\n          {cur}\n        </option>\n      ))}\n    </select>\n  );\n\n  return (\n    <div className='TypeData'>\n      <select value={type} name='type-data' onChange={handleChange}>\n        <option value='string'>String</option>\n        <option value='number'>Number</option>\n        <option value='currency'>Currency</option>\n      </select>\n      {isCurrency && renderCurrencies}\n    </div>\n  );\n};\n\nexport default SelectTypeData;\n","import React, { useState } from 'react';\nimport './Faq.scss';\n\nconst faqByFormulas = {\n  '=SUM(…)': `находит сумму ряда чисел или содержимого ряда ячеек. \n    Пример: =SUM(A1;A2;10;20). Доступные типы - number и currency.\n    Число к валюте прибавлять нельзя. Только числа к числам и валюта к валюте.`,\n  '=AVERAGE(…)': `вычисляет среднее арифметическое аргументов (за исключением текстовых). \n    Пример: =AVERAGE(A1;A2;10;20). Доступные типы - number и currency. Условия такие же, как в =SUM(…).`,\n  '=CONCAT(…)': 'объединяет несколько значений. Пример: =CONCAT(A1;A2;10;20).',\n  '=HYPERLINK(…)':\n    'cоздает гиперссылку в ячейке. Пример: =HYPERLINK(https://site.ua).',\n};\n\nconst Faq = () => {\n  const [showFaq, setShowFaq] = useState(false);\n\n  const handleClick = () => {\n    setShowFaq(!showFaq);\n  };\n  const renderFaq = showFaq ? (\n    <div>\n      {Object.entries(faqByFormulas).map(([formula, desc]) => {\n        return (\n          <div key={formula}>\n            <span>{formula}</span> - <span>{desc}</span>\n          </div>\n        );\n      })}\n    </div>\n  ) : null;\n\n  return (\n    <div className='Faq'>\n      <div onClick={handleClick}>Faq</div>\n      {renderFaq}\n    </div>\n  );\n};\n\nexport default Faq;\n","import React from 'react';\nimport './TableInfo.scss';\nimport { InfoRow } from '../InfoRow';\nimport { SelectTypeData } from '../SelectTypeData';\nimport { Faq } from '../Faq';\n\nconst TableInfo = () => (\n  <div className='TableInfo'>\n    <SelectTypeData />\n    <InfoRow />\n    <Faq />\n  </div>\n);\n\nexport default TableInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Table.scss';\n\nconst Table = ({ children }) => (\n  <table id='table'>\n    <tbody>{children}</tbody>\n  </table>\n);\n\nTable.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Row = ({ children }) => <tr>{children}</tr>;\n\nRow.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Row;\n","export default function isUrlValid(url) {\n  if (typeof url !== 'string') return;\n  const regexQuery =\n    '^(https?://)?(www\\\\.)?([-a-z0-9]{1,63}\\\\.)*?[a-z0-9][-a-z0-9]{0,61}[a-z0-9]\\\\.[a-z]{2,6}(/[-\\\\w@\\\\+\\\\.~#\\\\?&/=%]*)?$';\n  const reObj = new RegExp(regexQuery, 'i');\n\n  return reObj.test(url);\n}\n","import { SET_SELECTED_CELL } from '../constants';\n\nconst initialState = '';\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_SELECTED_CELL:\n      return  action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import {\n  SET_ALL_TABLE_DATA,\n  SET_CELL_DATA,\n  SET_TYPE_CELL,\n  SET_CURRENCY_CELL,\n} from '../constants';\n\nconst initialState = {};\n\nconst reducer = (state = initialState, action) => {\n  let cell = null;\n\n  switch (action.type) {\n    case SET_ALL_TABLE_DATA:\n      return {\n        ...action.payload,\n      };\n    case SET_CELL_DATA:\n      cell = Object.keys(action.payload)[0];\n      return {\n        ...state,\n        [cell]: {\n          ...state[cell],\n          ...action.payload[cell],\n        },\n      };\n    case SET_TYPE_CELL:\n      cell = Object.keys(action.payload)[0];\n      return {\n        ...state,\n        [cell]: {\n          ...state[cell],\n          ...action.payload[cell],\n        },\n      };\n    case SET_CURRENCY_CELL:\n      cell = Object.keys(action.payload)[0];\n      return {\n        ...state,\n        [cell]: {\n          ...state[cell],\n          ...action.payload[cell],\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport selectedCell from './selectedCell';\nimport tableData from './tableData';\n\nexport default combineReducers({\n  selectedCell,\n  tableData,\n});\n","import { createStore } from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import store from '../store';\nimport isUrlValid from './isUrlValid';\n\nlet formulaName = '';\nlet functionFormula = '';\nlet selectedCell = '';\n\nconst formulas = {\n  '=SUM(': function sum(...args) {\n    const { tableData } = store.getState();\n    const newArgs = args.map((el) => {\n      const isCorrectTypes = isTypesNumOrCurrency(\n        tableData[selectedCell],\n        tableData[el]\n      );\n\n      if (isCorrectTypes) {\n        if (tableData[el]) {\n          if (tableData[selectedCell].type !== tableData[el].type) {\n            return false;\n          }\n          return tableData[el].valueCell;\n        }\n        return isNaN(el) ? false : el;\n      }\n      return false;\n    });\n\n    if (newArgs.includes(false)) return '#ERROR!';\n\n    return newArgs.reduce((sum, el) => +sum + +el);\n  },\n  '=AVERAGE(': function average(...args) {\n    const sum = formulas['=SUM('](...args);\n    const { tableData } = store.getState();\n\n    const argsLength = args.reduce((sum, el) => {\n      if (el !== '' && !isNaN(el)) return ++sum;\n      if (tableData[el] !== undefined && tableData[el].valueCell !== '') {\n        return ++sum;\n      }\n      return sum;\n    }, 0);\n\n    const result = (sum / argsLength)\n      .toFixed(2)\n      .toString()\n      .replace(/(\\.[0-9]*[1-9])0+$|\\.0*$/, '$1');\n\n    return isNaN(result) ? '#ERROR!' : result;\n  },\n  '=CONCAT(': function concat(...args) {\n    const { tableData } = store.getState();\n\n    const newArgs = args.map((el) => {\n      if (tableData[el]) {\n        return tableData[el].valueCell;\n      }\n      return el;\n    });\n\n    return newArgs.join('');\n  },\n  '=HYPERLINK(': function hyperlink(...args) {\n    if (args.length > 1) return '#ERROR!';\n    const res = isUrlValid(args[0].toLowerCase());\n    if (res) return args[0].toLowerCase();\n    return '#ERROR!';\n  },\n};\n\nfunction hasFormula(value) {\n  return Object.keys(formulas).some((el) => {\n    if (value.includes(el)) {\n      formulaName = el;\n      functionFormula = formulas[el];\n      return true;\n    }\n    return false;\n  });\n}\n\nfunction transformValueToArgFormula(value) {\n  return value\n    .replace(/ +/g, ' ')\n    .replace(/\\)+/g, '')\n    .replace(/; +|;+| ; +/g, ';')\n    .replace(formulaName, '')\n    .split(';');\n}\n\nfunction isTypesNumOrCurrency(cell, nextCell) {\n  const types = ['number', 'currency'];\n  const typeSelectedCell = cell.type;\n  const typeNextCell = nextCell?.type;\n\n  if (types.includes(typeSelectedCell) && types.includes(typeNextCell))\n    return true;\n  if (types.includes(typeSelectedCell)) return true;\n  return false;\n}\n\nexport default function generateFormula(val, cell) {\n  let value = val.toUpperCase();\n  value.slice(-1);\n  let result = null;\n  selectedCell = cell;\n\n  if (hasFormula(value)) {\n    const argumentsFormula = transformValueToArgFormula(value);\n    if (argumentsFormula.length > 0) {\n      result = functionFormula(...argumentsFormula);\n    }\n  }\n\n  if (value[value.length - 1] !== ')') value += ')';\n\n  return {\n    newValueCell: result,\n    formulaCell: value,\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Cell.scss';\nimport isUrlValid from '../../utils/isUrlValid';\nimport generateFormula from '../../utils/generateFormula';\nimport generateCurrencyFormat from '../../utils/generateCurrencyFormat';\nimport { setSelectedCell, setCellData } from '../../store/actions';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false,\n    };\n    this.refInput = null;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const { indexCell, selectedCell, tableData } = this.props;\n    const { isEdit } = this.state;\n    // изменение выделенной ячейки\n    if (\n      nextProps.indexCell === nextProps.selectedCell ||\n      indexCell === selectedCell\n    ) {\n      return true;\n    }\n\n    if (isEdit !== nextState.isEdit) {\n      return true;\n    }\n\n    // изменение типа данных или содержимого в ячейке\n    if (\n      JSON.stringify(tableData[indexCell]) !==\n      JSON.stringify(nextProps.tableData[nextProps.indexCell])\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { indexCell, selectedCell, tableData } = this.props;\n    const { isEdit } = this.state;\n\n    // изменилась выбранная ячейка\n    if (prevProps.selectedCell !== selectedCell) {\n      // отменить редактирование предыдушей ячейки\n      if (isEdit) {\n        this.setState({ isEdit: false });\n      }\n\n      // при клике мышки обновить данные ячейки\n      if (this.refInput !== null) {\n        const { value } = this.refInput;\n        this.updateCellData(value, indexCell);\n      }\n\n      setTimeout(() => {\n        this.updateFormulasData();\n      }, 0);\n    }\n\n    // изменился тип ячейки\n    if (prevProps.tableData[indexCell]?.type !== tableData[indexCell]?.type) {\n      this.updateFormulasData();\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  updateCellData = (value, cell) => {\n    let cellData;\n\n    if (value.includes('=')) {\n      const { newValueCell, formulaCell } = generateFormula(value, cell);\n      cellData = { [cell]: { valueCell: newValueCell, formulaCell } };\n    } else {\n      cellData = { [cell]: { valueCell: value, formulaCell: '' } };\n    }\n\n    this.props.setCellData(cellData);\n  };\n\n  updateFormulasData = () => {\n    const { tableData } = this.props;\n\n    for (const cell in tableData) {\n      if (\n        tableData.hasOwnProperty(cell) &&\n        tableData[cell].formulaCell !== ''\n      ) {\n        this.updateCellData(tableData[cell].formulaCell, cell);\n      }\n    }\n  };\n\n  clearCellData = () => {\n    this.props.setCellData({\n      [this.props.selectedCell]: { valueCell: '', formulaCell: '' },\n    });\n  };\n\n  handleKeyDown = (e) => {\n    e.stopPropagation();\n    const { indexCell, selectedCell } = this.props;\n    const { isEdit } = this.state;\n\n    // очистить ячейку если выделенная и не редактирование и нажата кнопка del или backspace\n    if (\n      indexCell === selectedCell &&\n      !isEdit &&\n      (e.keyCode === 8 || e.keyCode === 46)\n    ) {\n      this.clearCellData();\n    }\n    // нажат enter обновить данные ячейки и формул\n    if (e.keyCode === 13 && this.refInput !== null) {\n      const { value } = this.refInput;\n      this.updateCellData(value, selectedCell);\n      this.updateFormulasData();\n      if (isEdit) this.setState({ isEdit: false });\n    }\n  };\n\n  handleClick = (e) => {\n    e.stopPropagation();\n    this.props.setSelectedCell(this.props.indexCell);\n  };\n\n  handleDoubleClick = (e) => {\n    e.stopPropagation();\n    this.setState({ isEdit: true });\n  };\n\n  generateValueCell = () => {\n    const { tableData, indexCell } = this.props;\n    const { isEdit } = this.state;\n    const { currency, formulaCell, valueCell } = tableData[indexCell];\n    let newValue = valueCell;\n\n    if (valueCell && currency) {\n      newValue = generateCurrencyFormat(valueCell, currency);\n    }\n\n    if (isUrlValid(valueCell)) {\n      newValue = (\n        <a href={valueCell} target='_blank' rel='noopener noreferrer'>\n          {valueCell}\n        </a>\n      );\n    }\n\n    if (isEdit) {\n      newValue = (\n        <input\n          autoFocus\n          defaultValue={formulaCell || valueCell}\n          ref={(r) => (this.refInput = r)}\n        />\n      );\n    }\n\n    return newValue;\n  };\n\n  render() {\n    const { selectedCell, indexCell, tableData } = this.props;\n\n    if (Object.keys(tableData).length === 0) return null;\n\n    const isSelectedCell = indexCell === selectedCell;\n    const correctValueCell = this.generateValueCell();\n    const styleSelectedCell = isSelectedCell ? 'SelectedCell' : null;\n\n    return (\n      <td\n        className={styleSelectedCell}\n        onClick={this.handleClick}\n        onDoubleClick={this.handleDoubleClick}\n      >\n        {correctValueCell}\n      </td>\n    );\n  }\n}\n\nCell.propTypes = {\n  indexCell: PropTypes.string,\n  selectedCell: PropTypes.string,\n  tableData: PropTypes.object,\n  setCellData: PropTypes.func,\n  setSelectedCell: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  selectedCell: state.selectedCell,\n  tableData: state.tableData,\n});\n\nexport default connect(mapStateToProps, { setSelectedCell, setCellData })(Cell);\n","export default function generateCurrencyFormat(value, currency) {\n  if (isNaN(value)) return '#ERROR!';\n\n  value = Number(value).toFixed(2);\n  let parts = value.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n  value = parts.join(',');\n  return currency + value;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FixedCell.scss';\n\nconst CellFixed = ({ value }) => <th>{value}</th>;\n\nCellFixed.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default CellFixed;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './App.scss';\nimport { setAllTableData } from '../../store/actions';\nimport { TableWrap } from '../TableWrap';\nimport { TableInfo } from '../TableInfo';\nimport { Table } from '../Table';\nimport { Row } from '../Row';\nimport { Cell } from '../Cell';\nimport { FixedCell } from '../FixedCell';\n\nconst alphabet = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst tableData = {};\n\nconst setDefaultTableData = (indexCell) => {\n  tableData[indexCell] = {\n    valueCell: '',\n    formulaCell: '',\n    type: 'string',\n    currency: '',\n  };\n};\n\nconst generateTable = () => {\n  const countRows = Array(11).fill(null);\n  const countCells = alphabet.split('').slice(0, 11);\n\n  const table = (\n    <Table>\n      {countRows.map((row, i) => (\n        <Row key={`row-${i}`}>\n          {countCells.map((cell, j) => {\n            if (i === 0) {\n              if (j === 0) {\n                return <FixedCell key={`0-${i}`} value={cell} />; // 00\n              }\n              return <FixedCell key={`${cell}-${i}`} value={cell} />; // A,B,C...\n            } else if (j === 0) {\n              return <FixedCell key={`${j}-${i}`} value={i.toString()} />; // 1,2,3...\n            }\n            const indexCell = `${cell}${i}`;\n            setDefaultTableData(indexCell);\n            return <Cell key={`${cell}-${j}`} {...{ indexCell }} />;\n          })}\n        </Row>\n      ))}\n    </Table>\n  );\n\n  return table;\n};\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const table = generateTable();\n\n  useEffect(() => {\n    dispatch(setAllTableData(tableData));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className='Container'>\n      <TableInfo />\n      <TableWrap>{table}</TableWrap>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport { App } from './components/App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}